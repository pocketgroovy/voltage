from django.shortcuts import render_to_response
from django.template.context import RequestContext
from witches.admintool.adm_mail import send_item_to_user, send_all_items_to_user
from witches.admintool.adm_util import throw_error, get_properties
from witches.models import *
from witches.admintool.admin_tools import insert_update_data, pull_master_data, fetch_json_response, upload_json_file
from witches.utils.util import  randomfilename
from bson import objectid

from django.views.decorators.cache import never_cache

from django import forms

import logging
logger = logging.getLogger(__name__)

def home(request):
    context = RequestContext(request)

    return render_to_response('admintool/adm_home.html', context_instance=context)


def load_master(request):
    context = RequestContext(request)
    context['message'] = ''

    if request.POST:
        masterdata = Loadfile.objects.create(masterload=request.FILES.get('masterfile'))
        logger.debug(str(masterdata))

        # content = readfile(masterdata.masterload.name, context)
        # content_dict = ast.literal_eval(content)

        insert_update_data(masterdata, context)

    return render_to_response('admintool/adm_loadmaster.html', context_instance=context)


def download_master(request):
    context = RequestContext(request)

    fileName = randomfilename('masterdata', 'xls')

    response = pull_master_data(fileName)
    #writefile_json(content=items, fileName=fileName, context=context)

    # content = readfile(fileName=fileName, context=context)
    # response = HttpResponse(content, content_type='text/csv')
    # response['Content-Disposition'] = 'attachment; filename=masterdata.csv'

    return response

# FIXME: needs to handle environment (Dev, Staging, Prod) selection...
# can't test it on Dev when dev is also handling the administration for Production (originally thought it was Tanuki)
@never_cache
def upload_player_json(request):
    context = RequestContext(request)
    context['message'] = ''

    if request.POST:
        json_file = request.FILES.get('json_file') 
        env = request.POST.get('env')  
        phone_id, err = upload_json_file(json_file, env)

        if not err:
            context['message'] = "successfully uploaded json for: " + phone_id
        else:
            context['message'] = "Error uploading json! ({0})".format(str(err))
    
    return render_to_response('admintool/adm_upload_json.html', context_instance=context)




@never_cache
def fetch_player_json(request):
    context = RequestContext(request)
    context['message'] = ''

    # FIXME: json should probably be generated by another view target
    if request.method == 'POST':
        form = PhoneIDForm(request.POST)
        if form.is_valid():
            phone_id = request.POST.get('phone_id')    
            env = request.POST.get('env')
            response, err = fetch_json_response(phone_id, env)

            if not err:
                return response     # FIXME: doesn't refresh context['message'] (see comment above)
            else:
                context['message'] = "Error: {0}".format(str(err))

    return render_to_response('admintool/adm_fetch.html', context_instance=context)


class PhoneIDForm(forms.Form):
    phone_id = forms.CharField(label='phone_id', max_length=100)




def deliver_window(request):
    context = RequestContext(request)
    users = WUsers.objects.filter(delete_flag=False)
    ingredients = Ingredients.objects.filter(delete_flag=False)
    potions = Potions.objects.filter(delete_flag=False)
    avatar_items = AvatarItems.objects.filter(delete_flag=False)
    return render_to_response('admintool/adm_deliver.html', {'users': users, 'ingredients_list': ingredients, 'potions_list': potions,
                                                             'avatar_items_list': avatar_items}, context_instance=context)


def parameters(request):
    context = RequestContext(request)

    if request.POST:
        gameproperties = GameProperties.objects.all()
        for gameproperty in gameproperties:
            if gameproperty.name in request.POST:
                if gameproperty.value != request.POST.get(gameproperty.name):
                    if gameproperty.name == 'default_user_book':
                        if objectid.ObjectId.is_valid(gameproperty.value):
                            try:
                                book = Books.objects.get(id=gameproperty.value)
                                if book:
                                    db_gameprop = GameProperties.objects.get(id=gameproperty.id)
                                    db_gameprop.value = request.POST.get(gameproperty.name)
                                    db_gameprop.save()
                            except Books.DoesNotExist:
                                message = "The Default user book doesn't exist, please confirm the id."
                                parameters = GameProperties.objects.all()
                                return render_to_response('admintool/adm_parameters.html', {'parameters': parameters, 'message': message},
                                                          context_instance=context)
                        else:
                            message = "The Default user book is not valid, please confirm the id."
                            parameters = GameProperties.objects.all()
                            return render_to_response('admintool/adm_parameters.html', {'parameters': parameters, 'message': message},
                                                      context_instance=context)
                    else:
                        db_gameprop = GameProperties.objects.get(id=gameproperty.id)
                        db_gameprop.value = request.POST.get(gameproperty.name)
                        db_gameprop.save()

        parameters = GameProperties.objects.all()
        message = 'Game Parameters where saved successfully!!!'
        return render_to_response('admintool/adm_parameters.html', {'parameters': parameters, 'message': message},
                                  context_instance=context)

    else:
        parameters = GameProperties.objects.all()
        return render_to_response('admintool/adm_parameters.html', {'parameters': parameters}, context_instance=context)


def is_selection_currency(item_dict):
    for item_type in item_dict:
        if item_type:
            if item_type == "starstones" or item_type == "coins" or item_type == "stamina_potions":
                return True
            else:
                return False
        else:
            return False


def gather_currencies_in_dict(item_list):
        currency_dict = {}
        for item in item_list:
            if is_selection_currency(item_list[item]):
                for key in item_list[item]:
                    if currency_dict.has_key(key):
                        new_num = currency_dict[key] + item_list[item][key]
                    else:
                        new_num = item_list[item][key]
                    currency_dict[key] = new_num
                currency_dict.update({item: item_list[item]})

        return currency_dict


def gather_selected_item_list(request):
    sel_item_ids_list1 = request.POST.getlist('sel_item_ids1[]')
    sel_item_ids_list2 = request.POST.getlist('sel_item_ids2[]')
    sel_item_ids_list3 = request.POST.getlist('sel_item_ids3[]')
    item_id_list = []
    if len(sel_item_ids_list1) > 0:
        for id in sel_item_ids_list1:
            if id:
                item_id_list.append({'id': id, 'received_flag': False})

    if len(sel_item_ids_list2) > 0:
        for id in sel_item_ids_list2:
            if id:
                item_id_list.append({'id': id, 'received_flag': False})

    if len(sel_item_ids_list3) > 0:
        for id in sel_item_ids_list3:
            if id:
                item_id_list.append({'id': id, 'received_flag': False})
    return item_id_list


def get_user_ids(request):
    all_users = request.POST.get('all_users')
    sel_users = request.POST.getlist('sel_users')
    if all_users:
        user_ids = WUsers.objects.filter(delete_flag=False).values_list('id', flat=True)

    elif sel_users:
        user_ids = sel_users
    else:
         user_ids = []

    return user_ids


def is_any_selected(item_id_list, currencies):
    if len(item_id_list) > 0:
        return True
    elif len(currencies) > 0:
        return True
    else:
        return False


def deliver(request):
    context = RequestContext(request)
    other = 'deliver'
    if request.POST:
        quantity1 = request.POST.get('quantity1')
        quantity2 = request.POST.get('quantity2')
        quantity3 = request.POST.get('quantity3')
        item_type1 = request.POST.get('item_type1')
        item_type2 = request.POST.get('item_type2')
        item_type3 = request.POST.get('item_type3')

        if not quantity1:
            quantity1 = 0
        if not quantity2:
            quantity2 = 0
        if not quantity3:
            quantity3 = 0

        item_list = {1: {item_type1: int(quantity1)}, 2: {item_type2: int(quantity2)}, 3: {item_type3: int(quantity3)}}

        user_ids = get_user_ids(request)
        item_id_list = gather_selected_item_list(request)
        currencies = gather_currencies_in_dict(item_list)

        all_items = request.POST.get('check_all_items')
        message = request.POST.get('message')

        if len(currencies) > 0:
            currency_dict = currencies
        else:
            currency_dict = {}

        if len(user_ids) > 0:
            for user_id in user_ids:
                if not all_items:
                    if is_any_selected(item_id_list, currency_dict):
                        send_item_to_user(item_id_list, message, user_id, currency_dict, context, other)
                    else:
                        Error = get_properties(err_type='Error', err_code='ERR1001')
                        res_dict = {'status': 'failed', 'function': other, 'Error': Error}
                        return throw_error(template='admintool/adm_deliver.html', context=context, obj_dict=res_dict)
                elif not item_type1:
                    Error = get_properties(err_type='Error', err_code='ERR1002')
                    res_dict = {'status': 'failed', 'function': other, 'Error': Error}
                    return throw_error(template='admintool/adm_deliver.html', context=context, obj_dict=res_dict)
                else:
                    send_all_items_to_user(message, user_id, item_type1, context, other)
                    item_id_list = ['all ' + item_type1]

            sent_items = {'item_list': item_id_list}
            if currency_dict != {}:
                sent_items.update(currency_dict)

        else:
            Error = get_properties(err_type='Error', err_code='ERR1000')
            res_dict = {'status': 'failed', 'function': other, 'Error': Error}
            return throw_error(template='admintool/adm_deliver.html', context=context, obj_dict=res_dict)

        return render_to_response('admintool/adm_deliver.html', {'recipients': user_ids, 'sent_item': sent_items},
                                  context_instance=context)

